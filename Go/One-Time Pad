package otp

import (
	"io"
)

type streamReader struct {
	r    io.Reader
	prng io.Reader
}

func (sr *streamReader) Read(p []byte) (int, error) {
	n, err := sr.r.Read(p)
	if err != nil && err != io.EOF {
		return n, err
	}

	prngBuf := make([]byte, n)
	_, _ = sr.prng.Read(prngBuf)

	for i := 0; i < n; i++ {
		p[i] ^= prngBuf[i]
	}

	return n, err
}

func NewReader(r io.Reader, prng io.Reader) io.Reader {
	return &streamReader{
		r:    r,
		prng: prng,
	}
}

type streamWriter struct {
	w    io.Writer
	prng io.Reader
}

func (sw *streamWriter) Write(p []byte) (int, error) {
	xorBuf := make([]byte, len(p))

	prngBuf := make([]byte, len(p))
	_, _ = sw.prng.Read(prngBuf)

	for i := 0; i < len(p); i++ {
		xorBuf[i] = p[i] ^ prngBuf[i]
	}

	return sw.w.Write(xorBuf)
}

func NewWriter(w io.Writer, prng io.Reader) io.Writer {
	return &streamWriter{
		w:    w,
		prng: prng,
	}
}
