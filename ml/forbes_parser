import requests
from bs4 import BeautifulSoup
import csv

def fetch_company_industry(company_url):
    try:
        page = requests.get(company_url, timeout=10)
        if page.status_code == 200:
            soup = BeautifulSoup(page.content, 'html.parser')
            industry_section = soup.find('th', string='Отрасль')
            if industry_section:
                industry_td = industry_section.find_next('td', class_='plainlist')
                if industry_td:
                    industries = industry_td.find_all('a')
                    industry_list = [industry.get_text(strip=True) for industry in industries]
                    industry = ', '.join(industry_list)
                    print(industry)
                else:
                    industry = '-'
            else:
                industry = '-'
        else:
            print(f"Page not found for {company_url}")
            industry = '-'
    except requests.exceptions.RequestException as e:
        print(f"Error fetching company profile data for {company_url}: {e}")
        industry = '-'

    return industry


def fetch_profile_data(billionaire_url):
    try:
        page = requests.get(billionaire_url)
        soup = BeautifulSoup(page.content, 'html.parser')
        occupation_section = soup.find('th', string='Компания')
        if not occupation_section:
            occupation_section = soup.find('th', string='Род деятельности')
        if occupation_section:
            company_name = occupation_section.find_next('td').get_text(separator=' ', strip=True)
            company_link = occupation_section.find_next('td').find('a')
            if company_link and 'href' in company_link.attrs:
                company_url = 'https://ru.wikipedia.org' + company_link['href']
                print(company_url)
                industry = fetch_company_industry(company_url)
            else:
                industry = '-'
        else:
            industry = '-'
    except Exception as e:
        print(f"Error fetching profile data for {billionaire_url}: {e}")
        industry = '-'

    return industry


def fetch_billionaires(url, year, country_default, industry_column_index, net_worth_change_column_index,
                       country_column_index):
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')

    billionaires = []
    table = soup.find('table', {'class': 'wikitable'})
    if not (table):
        table = soup.find('table', {'class': 'wikitable sortable jquery-tablesorter'})
    for row in table.find_all('tr')[1:]:
        cols = row.find_all('td')
        if not (cols):
            cols = row.find_all('th')
        if len(cols) >= 5:
            rank = cols[0].text.strip()
            name = cols[2].text.strip()
            age = cols[3].text.strip()
            country = cols[country_column_index].text.strip() if country_column_index != '-' else country_default
            link_tag = cols[2].find('a')
            if year == 2009:
                age = '-'
                net_worth = cols[3].text.strip()
                net_worth_change = cols[4].text.strip()

            elif country_column_index == 3:  # China
                name = cols[1].text.strip()
                age = cols[7].text.strip()
                net_worth = cols[2].text.strip()
                net_worth_change = '-'
                link_tag = cols[1].find('a')

            elif country_column_index == 0:  # Kazachstan
                if year == 2014 or year == 2013:
                    name = cols[2].text.strip()
                    age = cols[6].text.strip()
                    net_worth = int(cols[3].text.strip().replace(" ", "")) / 1000000000
                    net_worth_change = int(cols[4].text.strip().replace(" ", "")) / 1000000000 if cols[
                        4].text.strip().replace(" ", "").isdigit() else '-'
                else:
                    name = cols[1].text.strip()
                    age = cols[4].text.strip()
                    net_worth = int(cols[2].text.strip().replace(" ", "")) / 1000000000 if cols[2].text.strip().replace(
                        " ", "").isdigit() else cols[2].text.strip().replace(" ", "")
                    net_worth_change = '-'
                    link_tag = cols[1].find('a')
                country = 'Казахстан'

            elif year == 2014:
                name = cols[3].text.strip()
                age = cols[4].text.strip()
                net_worth = cols[5].text.strip()
                net_worth_change = cols[6].text.strip()
                link_tag = cols[3].find('a')
            else:
                net_worth = cols[4].text.strip()
                if country_default == 'Россия' and year == 2017:
                    net_worth_change = '-'
                else:
                    net_worth_change = cols[net_worth_change_column_index].text.strip()

            industry = ''
            if link_tag and 'href' in link_tag.attrs:
                billionaire_url = 'https://ru.wikipedia.org' + link_tag['href']
                industry = fetch_profile_data(billionaire_url)
            if not (industry):
                industry = '-'

        else:
            rank = cols[0].text.strip()
            name = cols[1].text.strip()
            age = '-'
            country = cols[country_column_index].text.strip() if country_column_index != '-' else country_default
            net_worth = cols[2].text.strip()
            net_worth_change = '-'
            link_tag = cols[1].find('a')
            industry = ''
            if link_tag and 'href' in link_tag.attrs:
                billionaire_url = 'https://ru.wikipedia.org' + link_tag['href']
                industry = fetch_profile_data(billionaire_url)
            if not (industry):
                industry = '-'
        billionaires.append({
            'rank': rank,
            'name': name,
            'net_worth': net_worth,
            'age': age,
            'country': country,
            'industry': industry,
            'net_worth_change': net_worth_change,
            'year': year
        })

    return billionaires


def save_to_csv(filename, data):
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['rank', 'name', 'net_worth', 'age', 'country', 'industry', 'net_worth_change', 'year']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for billionaire in data:
            writer.writerow(billionaire)


def process_russian_billionaires():
    urls = [

        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2021)', 'year': 2021},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2022)', 'year': 2022},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2017)', 'year': 2017},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2012)', 'year': 2012},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2011)', 'year': 2011},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2010)', 'year': 2010},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2009)', 'year': 2009},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2008)', 'year': 2008},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2007)', 'year': 2007},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2006)', 'year': 2006},
        {'url': 'https://ru.wikipedia.org/wiki/Список_богатейших_бизнесменов_России_(2005)', 'year': 2005}
    ]

    all_billionaires = []

    for item in urls:
        url = item['url']
        year = item['year']
        if year == 2017:
            billionaires = fetch_billionaires(url, year, 'Россия', industry_column_index=5,
                                              net_worth_change_column_index='-', country_column_index='-')
        elif year <= 2012:
            billionaires = fetch_billionaires(url, year, 'Россия', industry_column_index=3,
                                              net_worth_change_column_index='-', country_column_index='-')
        else:
            billionaires = fetch_billionaires(url, year, 'Россия', industry_column_index=6,
                                              net_worth_change_column_index=5, country_column_index='-')
        all_billionaires.extend(billionaires)

    return all_billionaires


def process_global_billionaires():
    urls = [
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2024)', 'year': 2024,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2023)', 'year': 2023,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2022)', 'year': 2022,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2020)', 'year': 2020,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2019)', 'year': 2019,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2018)', 'year': 2018,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2017)', 'year': 2017,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2016)', 'year': 2016,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2015)', 'year': 2015,
         'country_column_index': 0, 'industry_column_index': 3},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2014)', 'year': 2014,
         'country_column_index': 0, 'industry_column_index': 5},
        {'url': 'https://ru.wikipedia.org/wiki/Список_самых_богатых_людей_Казахстана_(2013)', 'year': 2013,
         'country_column_index': 0, 'industry_column_index': 5},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_Китая_(2021)', 'year': 2021,
         'country_column_index': 3, 'industry_column_index': 6},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2017)', 'year': 2017, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2016)', 'year': 2016, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2015)', 'year': 2015, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2014)', 'year': 2014, 'country_column_index': 7,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2013)', 'year': 2013, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2012)', 'year': 2012, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2011)', 'year': 2011, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2010)', 'year': 2010, 'country_column_index': 6,
         'industry_column_index': '-'},
        {'url': 'https://ru.wikipedia.org/wiki/Список_миллиардеров_(2009)', 'year': 2009, 'country_column_index': 5,
         'industry_column_index': '-'}
    ]

    all_billionaires = []

    for item in urls:
        url = item['url']
        year = item['year']
        country_column_index = item['country_column_index']
        industry_column_index = item['industry_column_index']
        billionaires = fetch_billionaires(url, year, '-', industry_column_index=industry_column_index,
                                          net_worth_change_column_index=5, country_column_index=country_column_index)
        all_billionaires.extend(billionaires)

    return all_billionaires


if __name__ == '__main__':
    russian_billionaires = process_russian_billionaires()
    global_billionaires = process_global_billionaires()
    all_billionaires = russian_billionaires + global_billionaires
    save_to_csv('all_billionaires_2009_2022.csv', all_billionaires)
    print(f"Dataset saved with {len(all_billionaires)} entries.")
